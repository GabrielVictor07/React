(tabs)index.js

import { StatusBar } from 'expo-status-bar';
import React from 'react';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import AppTab from '../AppTab';
import AppForm from '../AppForm';

const App: React.FC = () => {
  return (
    <SafeAreaProvider>
      <AppTab />
      <StatusBar style="light" />
    </SafeAreaProvider>
  );
};

export default App;

app/AppForm

import React, { useState } from 'react';
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, Text, View, TextInput, TouchableOpacity, Alert } from 'react-native';
import { Feather as Icon } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import AppItem from '../AppItem';

interface AppFormProps {
  route: {
    params?: {
      id?: number;
      descricao?: string;
      quantidade?: number;
    };
  };
}

export default function AppForm({ route }: AppFormProps) {
  const router = useRouter();  // Usando o useRouter() para navegação
  const id = route?.params?.id;
  const [descricao, setDescricao] = useState('');
  const [quantidade, setQuantidade] = useState('');

  async function handleButtonPress() {
    if (!descricao.trim() || !quantidade.trim()) {
      Alert.alert('Erro', 'Preencha todos os campos');
      return;
    }

    const listItem = {
      id: id || new Date().getTime(),
      descricao: descricao.trim(),
      quantidade: parseInt(quantidade) || 0,
    };

    try {
      // Usando o IP correto da sua máquina
      const response = await fetch('http://192.168.1.110:3000/tasks', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(listItem),
      });

      if (!response.ok) {
        throw new Error('Erro na requisição');
      }

      const result = await response.json();
      console.log('Item salvo:', result);
      router.push('/AppList');  // Navegando para a tela AppList
    } catch (error) {
      console.error('Erro ao salvar o item:', error);
      Alert.alert('Erro', 'Não foi possível salvar o item');
    }
  }

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.input}
        onChangeText={setDescricao}
        placeholder="O que está faltando em casa?"
        clearButtonMode="always"
        value={descricao}
      />
      <TextInput
        style={styles.input}
        onChangeText={setQuantidade}
        placeholder="Digite a quantidade"
        keyboardType="numeric"
        clearButtonMode="always"
        value={quantidade}
      />
      <TouchableOpacity style={styles.button} onPress={handleButtonPress}>
        <View style={styles.buttonContainer}>
          <Icon name="save" size={22} color="white" />
          <Text style={styles.buttonText}>Salvar</Text>
        </View>
      </TouchableOpacity>
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingTop: 50,
    paddingHorizontal: 20,
    backgroundColor: '#fff',
  },
  input: {
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 5,
    padding: 10,
    fontSize: 18,
    marginBottom: 15,
  },
  button: {
    backgroundColor: '#007bff',
    padding: 15,
    borderRadius: 5,
    alignItems: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  buttonText: {
    marginLeft: 10,
    fontSize: 18,
    color: '#fff',
    fontWeight: 'bold',
  },
});

app/AppItem

import React from "react";
import { StyleSheet, Text, View, TouchableOpacity, Alert } from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { useRouter } from "expo-router";
import Database from "./Database";
import AppList from '../AppList';

interface AppItemProps {
  id: number;
  descricao: string;
  quantidade: number;
}

export default function AppItem({ id, descricao, quantidade }: AppItemProps) {
  const router = useRouter();

  async function handleEditPress() {
    const item = await Database.getItem(id);
    if (item) {
      // Navegando para "AppForm" com os parâmetros
      router.push(`/AppForm?id=${item.id}&descricao=${item.descricao}&quantidade=${item.quantidade}`);
    }
  }

  function handleDeletePress() {
    Alert.alert(
      "Atenção",
      "Você tem certeza que deseja excluir este item?",
      [
        {
          text: "Não",
          style: "cancel",
        },
        {
          text: "Sim",
          onPress: async () => {
            await Database.deleteItem(id);
            // Navegando para "AppList" com o parâmetro de refresh
            router.push('/AppList?refresh=true');
          },
        },
      ],
      { cancelable: false }
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.textContainer}>
        <Text style={styles.descricao}>{descricao}</Text>
        <Text style={styles.quantidade}>Quantidade: {quantidade}</Text>
      </View>

      <View style={styles.buttonsContainer}>
        <TouchableOpacity
          onPress={handleEditPress}
          style={[styles.button, styles.editButton]}
        >
          <Ionicons name="pencil" size={18} color="white" />
        </TouchableOpacity>

        <TouchableOpacity
          onPress={handleDeletePress}
          style={[styles.button, styles.deleteButton]}
        >
          <Ionicons name="trash" size={18} color="white" />
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flexDirection: "row",
    backgroundColor: "white",
    borderRadius: 8,
    padding: 15,
    marginBottom: 10,
    alignItems: "center",
    justifyContent: "space-between",
    elevation: 2, // Sombra no Android
    shadowColor: "#000", // Sombra no iOS
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
  },
  textContainer: {
    flex: 1,
  },
  descricao: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
  quantidade: {
    fontSize: 14,
    color: "#666",
    marginTop: 4,
  },
  buttonsContainer: {
    flexDirection: "row",
    gap: 10,
  },
  button: {
    padding: 8,
    borderRadius: 6,
    justifyContent: "center",
    alignItems: "center",
    width: 36,
    height: 36,
  },
  editButton: {
    backgroundColor: "#007AFF", // Azul
  },
  deleteButton: {
    backgroundColor: "#FF3B30", // Vermelho
  },
});

app/AppList

import React, { useState, useEffect } from "react";
import { StyleSheet, View, ScrollView, Text, TouchableOpacity, Alert } from "react-native";
import { StatusBar } from "expo-status-bar";
import AppItem from "./AppItem";
import { useRouter } from "expo-router"; // Para navegação com expo-router

type Item = {
  id: number;
  descricao: string;
  quantidade: number;
};

export default function AppList() {
  const [items, setItems] = useState<Item[]>([]);
  const router = useRouter(); // Para navegar entre as telas

  const loadItems = async () => {
    try {
      const response = await fetch("http://192.168.1.110:3000/tasks");
      const data = await response.json();
      setItems(data);
    } catch (error) {
      console.error("Erro ao carregar itens:", error);
    }
  };

  // Carregar os itens quando o parâmetro de navegação for alterado
  useEffect(() => {
    loadItems(); // Carrega os itens sempre que a tela for carregada ou alterada
  }, []); // Efeito vazio, que executa apenas na montagem

  const handleDeleteItem = async (id: number) => {
    try {
      const response = await fetch(`http://192.168.1.110:3000/tasks/${id}`, {
        method: "DELETE",
      });

      if (response.ok) {
        Alert.alert("Sucesso", "Item removido com sucesso!");
        loadItems(); // Atualiza a lista após remoção
      } else {
        throw new Error("Erro ao excluir item");
      }
    } catch (error) {
      console.error("Erro:", error);
      Alert.alert("Erro", "Não foi possível excluir o item");
    }
  };

  const handleNavigateToForm = (item: Item) => {
    router.push(`/AppForm?id=${item.id}&descricao=${item.descricao}&quantidade=${item.quantidade}`);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Lista de Compras</Text>

      <ScrollView contentContainerStyle={styles.scrollContent}>
        {items.map((item) => (
          <View key={item.id} style={styles.itemContainer}>
            <AppItem
              id={item.id}
              descricao={item.descricao}
              quantidade={item.quantidade}
              navigation={router}
            />
            <TouchableOpacity
              style={styles.deleteButton}
              onPress={() => handleDeleteItem(item.id)}
            >
              <Text style={styles.deleteText}>Excluir</Text>
            </TouchableOpacity>
          </View>
        ))}
      </ScrollView>

      <StatusBar style="light" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#D93600",
    paddingTop: 40,
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    textAlign: "center",
    marginVertical: 20,
    color: "#fff",
  },
  scrollContent: {
    paddingHorizontal: 16,
    paddingBottom: 20,
  },
  itemContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 10,
  },
  deleteButton: {
    backgroundColor: "#D93600",
    padding: 8,
    borderRadius: 5,
  },
  deleteText: {
    color: "#fff",
    fontWeight: "bold",
  },
});

app/AppTab

import React from "react";
import { NavigationContainer, RouteProp } from "@react-navigation/native";
import {
  createBottomTabNavigator,
  BottomTabNavigationOptions,
} from "@react-navigation/bottom-tabs";
import { Ionicons } from "@expo/vector-icons";

import AppList from "./AppList";
import AppForm from "./AppForm";

type RootTabParamList = {
  AppList: undefined;
  AppForm: undefined;
};

const Tab = createBottomTabNavigator<RootTabParamList>();

const screenOptions = ({
  route,
}: {
  route: RouteProp<RootTabParamList, keyof RootTabParamList>;
}): BottomTabNavigationOptions => ({
  tabBarIcon: ({ focused, color, size }) => {
    let iconName: keyof typeof Ionicons.glyphMap = "list";

    if (route.name === "AppForm") {
      iconName = focused ? "add-circle" : "add-circle-outline";
    } else if (route.name === "AppList") {
      iconName = focused ? "list" : "list-outline";
    }

    return <Ionicons name={iconName} size={size} color={color} />;
  },
    tabBarActiveTintColor: "#32264d",
    tabBarInactiveTintColor: "#c1bccc",
    tabBarStyle: {
    backgroundColor: "#fafafc",
    paddingBottom: 5,
    height: 60,
  },
    tabBarLabelStyle: {
    fontSize: 12,
    marginBottom: 5,
  },
    headerShown: false,
});

const AppTab: React.FC = () => {
  return (
      <Tab.Navigator screenOptions={screenOptions}>
        <Tab.Screen
          name="AppList"
          component={AppList}
          options={{
            tabBarLabel: "Compras",
          }}
        />
        <Tab.Screen
          name="AppForm"
          component={AppForm}
          options={{
            tabBarLabel: "Adicionar",
          }}
        />
      </Tab.Navigator>
  );
};

export default AppTab;

app/Database

import AsyncStorage from '@react-native-async-storage/async-storage';

interface ListItem {
  id: number;
  descricao: string;
  quantidade: number;
}

async function saveItem(listItem: ListItem, id?: number) {
  const savedItems = await getItems();

  if (id) {
    const index = savedItems.findIndex(item => item.id === id);
    if (index !== -1) {
      savedItems[index] = { ...savedItems[index], ...listItem };
    }
  } else {
    listItem.id = new Date().getTime();
    savedItems.push(listItem);
  }

  await AsyncStorage.setItem('items', JSON.stringify(savedItems));
}

async function getItems(): Promise<ListItem[]> {
  try {
    const items = await AsyncStorage.getItem('items');
    return items ? JSON.parse(items) : [];
  } catch (error) {
    console.error("Erro ao recuperar os itens:", error);
    return [];
  }
}

async function getItem(id: number): Promise<ListItem | undefined> {
  const items = await getItems();
  return items.find(item => item.id === id);
}

async function deleteItem(id: number) {
  const items = await getItems();
  const filteredItems = items.filter(item => item.id !== id);
  await AsyncStorage.setItem('items', JSON.stringify(filteredItems));
}

export default { saveItem, getItems, getItem, deleteItem };

app/navigation.d

export type RootStackParamList = {
    AppForm: undefined;
    AppList: undefined;
  };
  
  export type AppFormRouteProp = {
    key: string;
    name: string;
    path: string | undefined;
  };
  